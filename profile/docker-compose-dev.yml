version: "3.8"

services:
  frontend:
    image: profileorg/profile-fe-dev
    expose:
      - 80
    restart: unless-stopped
    networks:
      - internet
    labels:
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN_FRONTEND}`)"
      - "traefik.http.routers.frontend.entrypoints=https"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"

  reverse-proxy:
    image: traefik:v2.10
    # Enables the web UI and tells Traefik to listen to docker
    restart: unless-stopped
    command: 
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--api.insecure=true"
      - "--providers.docker"
      - "--api=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${CF_API_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.delaybeforecheck=0"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
    environment:
      - CF_API_EMAIL=${CF_API_EMAIL}
      - CF_API_KEY=${CF_API_KEY}
    ports:
      # The HTTP port
      - "80:80"
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    networks:
      - internet
      
  backend:
    image: profileorg/profile-be-dev
    expose:
      - 80
    labels:
      - "traefik.http.routers.backend.rule=Host(`${DOMAIN_BACKEND}`)"
      - "traefik.http.routers.backend.entrypoints=https"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - PROFILE_DatabaseSettings__ConnectionString=Server=postgres;Port=5432;Database=${PG_DATABASE};User ID=${PG_USERNAME};Password=${PG_PASSWORD};
      - BASE_FRONTEND_URL=https://${DOMAIN_FRONTEND}
    networks:
      - internet
      - no-internet

  postgres:
    image: postgres:alpine
    restart: unless-stopped
    expose:
      - 5432
    environment:
      - POSTGRES_USER=${PG_USERNAME}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DB=${PG_DATABASE}
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - no-internet

volumes:
  pg_data:

networks:
  internet: {}
  no-internet:
    internal: true